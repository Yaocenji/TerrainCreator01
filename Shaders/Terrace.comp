#version 450 core

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 0, r32f) uniform image2D sourse;

layout (binding = 1, r32f) uniform image2D data;

// 地形最大高度
uniform float TerrainHeight;

// 输入1：阶梯数
uniform int TerraceNum;
// 输入2：阶梯锐利系数
uniform float Sharpness;
// 输入3：阶梯模式：单/双向
uniform int Model;


float TerraceTransForm(float src){
   float ans = src;
   // 阶梯层高
   float terraceHeight = TerrainHeight / float(TerraceNum);
   // 所属层数
   int floorNum = int(src / terraceHeight);
   // 在所在层内的高度
   float baseHeight = float(floorNum) * terraceHeight;
   // 层内绝对高度
   float innerHeight = src - baseHeight;
   // 层内的相对高度
   float innerRelativeHeight = innerHeight / terraceHeight;
   // 新的层内相对高度
   float newInnerRelativeHeight;
   // 新的层内绝对高度
   float newInnerHeight;
   // 单向
   if (Model == 0){
      newInnerRelativeHeight = pow(innerRelativeHeight, exp(Sharpness * 5.0));
      newInnerHeight = newInnerRelativeHeight * terraceHeight;
   }
   // 双向
   else if (Model == 1){
      if (innerRelativeHeight >= 0.5){
         newInnerRelativeHeight = 0.5 * pow(2.0 * innerRelativeHeight - 1.0, exp(Sharpness * 5.0)) + 0.5;
         newInnerHeight = newInnerRelativeHeight * terraceHeight;
      }else {
         newInnerRelativeHeight = -0.5 * pow(-2.0 * innerRelativeHeight + 1.0, exp(Sharpness * 5.0)) + 0.5;
         newInnerHeight = newInnerRelativeHeight * terraceHeight;
      }
   }
   ans = baseHeight + newInnerHeight;
   /* 测试代码
   ans = newInnerRelativeHeight * TerrainHeight;
   */
   return ans;
}

void main(){
   float ans = imageLoad(sourse, ivec2(gl_GlobalInvocationID.xy)).r;
   // TODO
   ans = TerraceTransForm(ans);
   imageStore(data, ivec2(gl_GlobalInvocationID.xy), vec4(ans, ans,ans, ans));
}
