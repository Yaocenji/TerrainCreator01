#version 450 core

// path tracing 关于高度场地形的特化版本

// kernel对应屏幕空间的像素
layout (local_size_x = 32, local_size_y = 32) in;

/**
    uniform内容
*/

// 屏幕(RT)大小
uniform int screenWidth;
uniform int screenHeight;

// 渲染源数据
// 为什么使用texture作为源数据而非image2D？
// 因为预渲染的渲染结果是
// 屏幕RT颜色通道
uniform sampler2D RTColor;
// 世界空间坐标通道
uniform sampler2D RTWorldPos;
// 法线通道
uniform sampler2D RTNormal;

// 渲染目标
// 为何使用image2D而非texture
// -- 因为使用了计算着色器而非片元着色器，计算着色器无法写入数据到texture
layout (binding = 0, rgba32f) uniform image2D RTTarget;

// 重建世界空间摄像机光线的数据
// model矩阵
uniform mat4 model;
// vp逆矩阵
uniform mat4 view_inverse;
uniform mat4 proj_inverse;
// 近平面
uniform float near;
// 远平面
uniform float far;
// 摄像机位置
uniform vec3 cameraPos;

// 地形信息
layout (binding = 1, r32f) uniform image2D HeightField;
uniform int TerrainGrid;
uniform float TerrainSize;
uniform float TerrainHeight;

// 光源信息
uniform vec3 mainLightColor;
uniform float mainLightStrength;
uniform vec3 mainLightDir;

// 时间信息
struct Time{
    int hour;
    int minute;
    int second;
    int msec;
};
uniform Time time;

/**
    一些封装的结构体
*/

// AABB包围盒
struct AABB{
    vec3 pointMin;
    vec3 pointMax;
};
// 三维光线
struct Ray3D{
    vec3 point;
    vec3 direction;
};
// 二维光线
struct Ray2D{
    vec2 point;
    vec2 direction;
};


// 三角形
struct Triangle{
    vec3 points[3];
};
// 空间任意平面
struct Plane{
    vec3 normal;
    vec3 point;
};

// 任意表面一点
struct SurfPoint{
    vec3 normal;

};

/**
    数学轮子
*/

// 交换数a、b
void swap(inout float a, inout float b){
    float c = a;
    a = b;
    b = c;
}
// 三数最大值
float max3(float a, float b, float c){
    return max(max(a, b), c);
}
// 三数最小值
float min3(float a, float b, float c){
    return min(min(a, b), c);
}

// 将深度缓冲值转化为世界空间下距离
float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0;
    return (2.0 * near * far) / (far + near - z * (far - near));
}

// 用到的一个质数数列
const uint primeNumbers[297] = 
{17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113
, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251
, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397
, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557
, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701
, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863
, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031
, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171
, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303
, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471
, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607
, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753
, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913
, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999};
uint getPrime(uint index){
    return primeNumbers[index % 295];
}

// time转随机数种子
uint timeSeed(){
    uint msec = uint(time.hour * 3600 * 1e3 + time.minute * 60 * 1e3 + time.second * 1e3 + time.msec);
    uint index= time.hour % 3 + time.minute % 5 + time.second + time.msec;
    msec %= getPrime(index);
    return max(msec, 11);
}

// 随机数种子生成器
// value的三个分量都要大于0；
uint seetGenCnt = 0;
uint SeedGen(vec3 value){
    uint seed;
    seed = uint((value.x * 7 + value.y * 11 + value.z * 13 + 17 * timeSeed()) * TerrainSize * getPrime(seetGenCnt) * getPrime(seetGenCnt + 1) * 19);
    seetGenCnt ++;
    seetGenCnt %= 475;
    return seed;
}

// XOR Shift随机数生成器
uint XorShift(uint seed){
    uint ans = seed;
    ans ^= (ans << 13);
    ans ^= (ans >> 17);
    ans ^= (ans << 5);
    return ans;
}
float XorShiftRand(uint seed){
    uint tar = seed;
    for(int i = 0; i < 3; i++){
        tar = XorShift(tar);
    }
    return float(tar) * (1.0 / 4294967296.0);
}

//LCG随机数生成器
uint LCG(uint seed)
{
    seed = uint(1664525) * seed + uint(1013904223);
    return seed;
}
float LCGRand(uint seed){
    return float(LCG(seed)) * (1.0 / 4294967296.0);
}


/**
    光线算法轮子
*/

// 数x是否在数a和数b之间
bool contains(float x, float a, float b){
    if (a <= b){
        if (x >= a && x <= b) return true;
        else  return false;
    } else {
        if (x >= b && x <= a) return true;
        else  return false;
    }
}
// 点是否在盒内
bool contains(vec3 px, vec3 pa, vec3 pb){
    if (contains(px.x, pa.x, pb.x) 
        && contains(px.y, pa.y, pb.y)
        && contains(px.z, pa.z, pb.z))
        return true;
    else return false;
}
bool contains(vec3 px, AABB myAABB){
    if (contains(px, myAABB.pointMin, myAABB.pointMax))
        return true;
    else return false;
}

// 光线与平行与坐标平面的平面相交
bool ray_intersection_xz_plane(Ray3D myRay, float y, out float t, out vec3 inter_point){
    // 看y分量差值
    float delta_y = y - myRay.point.y;
    // 如果方向y分量为0
    if (myRay.direction.y == 0){
        if (delta_y == 0){
            inter_point = myRay.point;
            return true;
        } else {
            return false;
        }
    }
    // 否则计算步进长度
    float this_t = delta_y / myRay.direction.y;
    // 为负说明交点在后方
    if (this_t < 0){
        return false;
    }else {
        t = this_t;
        inter_point = myRay.point + this_t * myRay.direction;
        return true;
    }
}
bool ray_intersection_xy_plane(Ray3D myRay, float z, out float t,out vec3 inter_point){
    // 看y分量差值
    float delta_z = z - myRay.point.z;
    // 如果方向y分量为0
    if (myRay.direction.z == 0){
        if (delta_z == 0){
            inter_point = myRay.point;
            return true;
        } else {
            return false;
        }
    }
    // 否则计算步进长度
    float this_t = delta_z / myRay.direction.z;
    // 为负说明交点在后方
    if (this_t < 0){
        return false;
    }else {
        t = this_t;
        inter_point = myRay.point + this_t * myRay.direction;
        return true;
    }
}
bool ray_intersection_yz_plane(Ray3D myRay, float x, out float t,out vec3 inter_point){
    // 看y分量差值
    float delta_x = x - myRay.point.x;
    // 如果方向y分量为0
    if (myRay.direction.x == 0){
        if (delta_x == 0){
            inter_point = myRay.point;
            return true;
        } else {
            return false;
        }
    }
    // 否则计算步进长度
    float this_t = delta_x / myRay.direction.x;
    // 为负说明交点在后方
    if (this_t < 0){
        return false;
    }else {
        t = this_t;
        inter_point = myRay.point + this_t * myRay.direction;
        return true;
    }
}

// 光线与平行于坐标平面的矩形相交
bool ray_intersection_xz_rect(Ray3D myRay, float y, vec2 x, vec2 z, out float t, out vec3 inter_point){
    float tmp_t;
    vec3 tmp_inter_point;
    bool flag = ray_intersection_xz_plane(myRay, y, tmp_t, tmp_inter_point);
    if (!flag){
        return false;
    }else {
        if (contains(tmp_inter_point.x, x.x, x.y) 
            && contains(tmp_inter_point.z, z.x, z.y)){
            t = tmp_t;
            inter_point = tmp_inter_point;
            return true;
        }else {
            return false;
        }
    }
}
bool ray_intersection_xy_rect(Ray3D myRay, float z, vec2 x, vec2 y, out float t, out vec3 inter_point){
    float tmp_t;
    vec3 tmp_inter_point;
    bool flag = ray_intersection_xy_plane(myRay, z, tmp_t, tmp_inter_point);
    if (!flag){
        return false;
    }else {
        if (contains(tmp_inter_point.x, x.x, x.y) 
            && contains(tmp_inter_point.y, y.x, y.y)){
            t = tmp_t;
            inter_point = tmp_inter_point;
            return true;
        }else {
            return false;
        }
    }
}
bool ray_intersection_yz_rect(Ray3D myRay, float x, vec2 y, vec2 z, out float t, out vec3 inter_point){
    float tmp_t;
    vec3 tmp_inter_point;
    bool flag = ray_intersection_yz_plane(myRay, x, tmp_t, tmp_inter_point);
    if (!flag){
        return false;
    }else {
        if (contains(tmp_inter_point.y, y.x, y.y) 
            && contains(tmp_inter_point.z, z.x, z.y)){
            t = tmp_t;
            inter_point = tmp_inter_point;
            return true;
        }else {
            return false;
        }
    }
}

// 光线与aabb盒求交
bool ray_intersection_aabb(Ray3D myRay, AABB myAABB, out float t, out vec3 inter_point){
    // 判断光线起点是否在aabb内
    bool myflag = false, tmp_flag[6];
    float tmp_t[6];
    vec3 tmp_inter_point[6];

    tmp_flag[0] = ray_intersection_xz_rect(myRay, myAABB.pointMin.y, vec2(myAABB.pointMin.x, myAABB.pointMax.x), vec2(myAABB.pointMin.z, myAABB.pointMax.z), tmp_t[0], tmp_inter_point[0]);

    tmp_flag[1] = ray_intersection_xz_rect(myRay, myAABB.pointMax.y, vec2(myAABB.pointMin.x, myAABB.pointMax.x), vec2(myAABB.pointMin.z, myAABB.pointMax.z), tmp_t[1], tmp_inter_point[1]);

    tmp_flag[2] = ray_intersection_xy_rect(myRay, myAABB.pointMin.z, vec2(myAABB.pointMin.x, myAABB.pointMax.x), vec2(myAABB.pointMin.y, myAABB.pointMax.y), tmp_t[2], tmp_inter_point[2]);

    tmp_flag[3] = ray_intersection_xy_rect(myRay, myAABB.pointMax.z, vec2(myAABB.pointMin.x, myAABB.pointMax.x), vec2(myAABB.pointMin.y, myAABB.pointMax.y), tmp_t[3], tmp_inter_point[3]);

    tmp_flag[4] = ray_intersection_yz_rect(myRay, myAABB.pointMin.x, vec2(myAABB.pointMin.y, myAABB.pointMax.y), vec2(myAABB.pointMin.z, myAABB.pointMax.z), tmp_t[4], tmp_inter_point[4]);

    tmp_flag[5] = ray_intersection_yz_rect(myRay, myAABB.pointMax.x, vec2(myAABB.pointMin.y, myAABB.pointMax.y), vec2(myAABB.pointMin.z, myAABB.pointMax.z), tmp_t[5], tmp_inter_point[5]);

    for(int i = 0; i < 6; i++){
        if (tmp_flag[i]){
            if (!myflag){
                myflag = true;
                t = tmp_t[i];
                inter_point = tmp_inter_point[i];
            }else {
                if (t > tmp_t[i]){
                    t = tmp_t[i];
                    inter_point = tmp_inter_point[i];
                }
            }
        }
    }
    return myflag;
}

// 光线与任意平面求交
bool ray_intersection_plane(Ray3D myRay, Plane myPlane, out float t, out vec3 inter_point){
    // 先判定光线与平面发现是否垂直，即与平面法线是否垂直
    float denom = dot(myRay.direction, myPlane.normal);
    if (denom <= 1e-5){
        return false;
    }
    float tmp_t = dot(myPlane.point - myRay.point, myPlane.normal) / denom;
    if (tmp_t > 0){
        t = tmp_t;
        inter_point = myRay.point + tmp_t * myRay.direction;
        return true;
    } else return false;
}

// 光线与任意三角形相交
bool ray_intersection_triangle(Ray3D myRay, Triangle myTriangle, out float t, out vec3 inter_point, out vec3 normal){
    // 先找三角形所属平面，然后求交得到交点
    Plane thisPlane;
    thisPlane.point = myTriangle.points[0];
    thisPlane.normal = normalize(cross(myTriangle.points[0] - myTriangle.points[1], myTriangle.points[0] - myTriangle.points[2]));

    vec3 tmp_inter_point;
    float tmp_t;
    bool flag = ray_intersection_plane(myRay, thisPlane, tmp_t, tmp_inter_point);

    if (!flag)
        return false;
    else {
        // 判断焦点是否在三角形内
        vec3 c0 = cross(normalize(myTriangle.points[0] - tmp_inter_point), normalize(myTriangle.points[1] - tmp_inter_point));
        vec3 c1 = cross(normalize(myTriangle.points[1] - tmp_inter_point), normalize(myTriangle.points[2] - tmp_inter_point));
        vec3 c2 = cross(normalize(myTriangle.points[2] - tmp_inter_point), normalize(myTriangle.points[0] - tmp_inter_point));
        // 焦点在三角形内
        if (dot(c0, c1) > 0 && dot(c1, c2) > 0 && dot(c2, c0) > 0 && tmp_t > 1e-5){
            t = tmp_t;
            inter_point = tmp_inter_point;
            normal = thisPlane.normal;
            return true;
        }else {
            return false;
        }
    }
}


// 一个地形aabb
AABB terrainAABB;
// 已知一个浮点位置值，计算该值对应地形地块索引
int terrainGridIndex(float value){
    return int(clamp((value / abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x)) + 0.5, 0, 1) * float(TerrainGrid));
}
// 已知一个浮点位置值，计算该值对应地形地块索引后剩余小数部分
float terrainGridFrac(float value){
    return fract(clamp((value / abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x)) + 0.5, 0, 1) * float(TerrainGrid));
}
// 已知对应地块索引，计算真实的位置值
float terrainGridPos(int index){
    return (clamp(float(index) / float(TerrainGrid), 0, 1) - 0.5) * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x);
}
// 光线与某个地块（两个三角形）求交
bool ray_intersection_terrainPlot(Ray3D myRay, ivec2 index_pos, out float t, out vec3 inter_point, out vec3 normal){
    // 判定光线是否和两个三角形相交
    float height00 = imageLoad(HeightField, index_pos).r;
    height00 = (model * vec4(0, height00, 0, 1)).y;
    float height01 = imageLoad(HeightField, index_pos + ivec2(0, 1)).r;
    height01 = (model * vec4(0, height01, 0, 1)).y;
    float height10 = imageLoad(HeightField, index_pos + ivec2(1, 0)).r;
    height10 = (model * vec4(0, height10, 0, 1)).y;
    float height11 = imageLoad(HeightField, index_pos + ivec2(1, 1)).r;
    height11 = (model * vec4(0, height11, 0, 1)).y;
    // 构建三角形
    Triangle tri_0;
    tri_0.points[0] = vec3(terrainGridPos(index_pos.x), height00, terrainGridPos(index_pos.y));
    tri_0.points[1] = vec3(terrainGridPos(index_pos.x + 1), height10, terrainGridPos(index_pos.y));
    tri_0.points[2] = vec3(terrainGridPos(index_pos.x + 1), height11, terrainGridPos(index_pos.y + 1));
    Triangle tri_1;
    tri_1.points[0] = vec3(terrainGridPos(index_pos.x), height00, terrainGridPos(index_pos.y));
    tri_1.points[1] = vec3(terrainGridPos(index_pos.x + 1), height11, terrainGridPos(index_pos.y + 1));
    tri_1.points[2] = vec3(terrainGridPos(index_pos.x), height01, terrainGridPos(index_pos.y + 1));

    // 求交运算
    bool flag_0, flag_1;
    float tmp_t;
    vec3 tmp_inter_point;
    vec3 tmp_normal;

    flag_0 = ray_intersection_triangle(myRay, tri_0, tmp_t, tmp_inter_point, tmp_normal);
    if (flag_0){
        t = tmp_t;
        inter_point = tmp_inter_point;
        normal = tmp_normal.y >= 0 ? tmp_normal : -tmp_normal;
    }
    flag_1 = ray_intersection_triangle(myRay, tri_1, tmp_t, tmp_inter_point, tmp_normal);
    if (flag_1){
        if ((flag_0 && tmp_t < t) || (!flag_0)){
            t = tmp_t;
            inter_point = tmp_inter_point;
            normal = tmp_normal.y >= 0 ? tmp_normal : -tmp_normal;
        }
    }
    return (flag_0 || flag_1); 
}
/** 
    光线与地形求交
    函数特化：因为地形网格为标准xz平面的正方形grid，
    因此不需要显式加速Tree，而使用特殊的算法
*/
bool ray_intersection_terrainmesh(Ray3D myRay, out float t, out vec3 inter_point, out vec3 normal, out int returnState){
    t = 0;
    inter_point = vec3(0);

    float t_0 = 0; 
    vec3 inter_point_0 = vec3(0, 0, 0);
    vec3 normal_0 = vec3(0.5);

    // 首先判定ray和地形整体的aabb是否相交
    bool flag_0 = false;
    flag_0 = ray_intersection_aabb(myRay, terrainAABB, t_0, inter_point_0);

    t = t_0;

    if (!flag_0) {
        returnState = 1;
        return false;
    }

    // 如果光线在aabb内，那么不判断是否与“壁”相交
    // 否则判断是否和四面的“壁”相交
    bool flag_1 = false;
    if (!contains(myRay.point, terrainAABB)){
        // 先判定和哪个“壁”可能相交
        // 如果焦点处于x下界，和x下界的“壁”进行求交
        if (abs(inter_point_0.x - terrainAABB.pointMin.x) <= 1e-5){
            // 计算当前位置的整数z索引
            int z_index = terrainGridIndex(inter_point_0.z);
            int z_index_p = z_index + 1 > TerrainGrid - 1 ? z_index : z_index + 1;
            float fracPart = terrainGridFrac(inter_point_0.z);

            float height0 = imageLoad(HeightField, ivec2(0, z_index)).r;
            float height1 = imageLoad(HeightField, ivec2(0, z_index_p)).r;

            float height = height0 * (1.0 - fracPart) + height1 * fracPart;
            height = (model * vec4(0, height, 0, 1.0)).y;

            if (inter_point_0.y < height){
                normal_0 = vec3(-1, 0, 0);
                flag_1 = true;
            }
            else {
                flag_1 = false;
            }
        }
        // 如果焦点处于x上界，和x上界的“壁”进行求交
        else if (abs(inter_point_0.x - terrainAABB.pointMax.x) <= 1e-5){
            // 计算当前位置的整数z索引
            int z_index = terrainGridIndex(inter_point_0.z);
            int z_index_p = z_index + 1 > TerrainGrid - 1 ? z_index : z_index + 1;
            float fracPart = terrainGridFrac(inter_point_0.z);

            float height0 = imageLoad(HeightField, ivec2(TerrainGrid - 1, z_index)).r;
            float height1 = imageLoad(HeightField, ivec2(TerrainGrid - 1, z_index_p)).r;

            float height = height0 * (1.0 - fracPart) + height1 * fracPart;
            height = (model * vec4(0, height, 0, 1.0)).y;

            if (inter_point_0.y < height){
                normal_0 = vec3(1, 0, 0);
                flag_1 = true;
            }
            else 
                flag_1 = false;
        }
        // 如果焦点处于z下界，和z下界的“壁”进行求交
        else if (abs(inter_point_0.z - terrainAABB.pointMin.z) <= 1e-5){
            // 计算当前位置的整数x索引
            int x_index = terrainGridIndex(inter_point_0.x);
            int x_index_p = x_index + 1 > TerrainGrid - 1 ? x_index : x_index + 1;
            float fracPart = terrainGridFrac(inter_point_0.x);

            float height0 = imageLoad(HeightField, ivec2(x_index, 0)).r;
            float height1 = imageLoad(HeightField, ivec2(x_index_p, 0)).r;

            float height = height0 * (1.0 - fracPart) + height1 * fracPart;
            height = (model * vec4(0, height, 0, 1.0)).y;

            if (inter_point_0.y < height){
                normal_0 = vec3(0, 0, -1);
                flag_1 = true;
            }
            else 
                flag_1 = false;
        }
        // 如果焦点处于z上界，和z上界的“壁”进行求交
        else if (abs(inter_point_0.z - terrainAABB.pointMax.z) <= 1e-5){
            // 计算当前位置的整数x索引
            int x_index = terrainGridIndex(inter_point_0.x);
            int x_index_p = x_index + 1 > TerrainGrid - 1 ? x_index : x_index + 1;
            float fracPart = terrainGridFrac(inter_point_0.x);

            float height0 = imageLoad(HeightField, ivec2(x_index, TerrainGrid - 1)).r;
            float height1 = imageLoad(HeightField, ivec2(x_index_p, TerrainGrid - 1)).r;

            float height = height0 * (1.0 - fracPart) + height1 * fracPart;
            height = (model * vec4(0, height, 0, 1.0)).y;

            if (inter_point_0.y < height){
                normal_0 = vec3(0, 0, 1);
                flag_1 = true;
            }
            else 
                flag_1 = false;
        }
    }

    if (flag_1) {
        t = t_0; 
        inter_point = inter_point_0;
        normal = normal_0;
        returnState = 2;
        return true;
    }

    // 如果不与四面的“壁”相交 或 光线出发点在地形AABB内部，
    // 那么判断是否与地形内部地块相交
    bool flag_2 = false;
    // 首先将ray投影到xz平面，计算ray经过的grid格
    // 计算grid格算法为：线段光栅化
    Ray2D myRay2D;
    // 根据3D光线起点是否在地形内部，计算2D光线起点
    // 在内部
    if (contains(myRay.point, terrainAABB)){
        myRay2D.point = myRay.point.xz;
    }
    // 不在内部
    else {
        myRay2D.point = inter_point_0.xz;
    }
    myRay2D.direction = normalize(myRay.direction.xz);
    // clamp保证范围
    myRay2D.point.x = clamp(myRay2D.point.x, -0.5 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x), 0.5 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x));
    myRay2D.point.y = clamp(myRay2D.point.y, -0.5 * abs(terrainAABB.pointMax.z - terrainAABB.pointMin.z), 0.5 * abs(terrainAABB.pointMax.z - terrainAABB.pointMin.z));
    
    // 初始点：
    ivec2 beginPos;
    beginPos.x = terrainGridIndex(myRay2D.point.x);
    beginPos.y = terrainGridIndex(myRay2D.point.y);

    vec2 beginPosF;
    beginPosF.x = beginPos.x + terrainGridFrac(myRay2D.point.x);
    beginPosF.y = beginPos.y + terrainGridFrac(myRay2D.point.y);

    // 计算投影的直线的一般方程
    float A = -myRay2D.direction.y;
    float B = myRay2D.direction.x;
    float C = -A * beginPosF.x - B * beginPosF.y;

    // 需要步进的方向：左右/上下
    int marchDir[2];
    // 根据向量方向确定步进方向
    if (myRay2D.direction.x >= 0)
        marchDir[0] = 1;
    else marchDir[0] = -1;
    if (myRay2D.direction.y >= 0)
        marchDir[1] = 1;
    else marchDir[1] = -1;
    
    // 从beginPos开始步进
    ivec2 marchingPos = beginPos;
    // 循环中会用到的变量
    ivec2 newPos;
    ivec2 newPos_0, newPos_1;
    float value_0, value_1;
    // 强行让光线步进50格（除非与三角形发生碰撞）
    int cnt = 0;

    while(true){
        // 循环结束条件：1、发生相交；2、前进方向出界
        // 先判断是否有相交
        if (ray_intersection_terrainPlot(myRay, marchingPos, t_0, inter_point_0, normal_0)){
            // 相交，于是退出
            flag_2 = true;
            break;
        }
        // 不相交，那么寻找下一次
            
        // 先确定步进方向
        newPos_0 = ivec2(marchingPos.x + marchDir[0], marchingPos.y);
        newPos_1 = ivec2(marchingPos.x, marchingPos.y + marchDir[1]);

        value_0 = abs(A * (newPos_0.x + 0.5) + B * (newPos_0.y + 0.5) + C);
        value_1 = abs(A * (newPos_1.x + 0.5) + B * (newPos_1.y + 0.5) + C);
        if (value_0 < value_1){
            newPos = newPos_0;
        }else {
            newPos = newPos_1;
        }
        // 先看前进方向是否还在地形内部
        if ((newPos.x < 0 || newPos.x >= TerrainGrid - 1
            || newPos.y < 0 || newPos.y >= TerrainGrid - 1)
            && cnt > 50){
            // 不在内部，那么判定此光线没有与地形相交，结束
            flag_2 = false;
            break;
        }else {
            // 在内部，那么判定继续步进
            marchingPos = newPos;
            cnt ++;
        }
    }
    if (flag_2){
        t = t_0;
        inter_point = inter_point_0;
        normal = normal_0;
        returnState = 3;
        return true;
    }
    else {
        returnState = 4;
        return false;
    }
}

/** 
    光线与场景求交
    除了地形，还有一个地平面

*/
bool ray_intersection_scene(Ray3D myRay, out float t, out vec3 inter_point, out vec3 normal, out int returnState){
    if (ray_intersection_terrainmesh(myRay, t, inter_point, normal, returnState)){
        return true;
    }
    else if (ray_intersection_xz_rect(myRay, 0, vec2(-3, 3), vec2(-3, 3), t, inter_point)){
        normal = vec3(0, 1, 0);
        returnState = 0;
        return true;
    }
    else{
        return false;
    }
}

void main(){
    // 首先清理无用kernel
    if (gl_GlobalInvocationID.x >= screenWidth || gl_GlobalInvocationID.y >= screenHeight){
        return;
    }
    // 当前像素的位置
    vec2 texCoord = vec2(float(gl_GlobalInvocationID.x) / screenWidth, 
                         float(gl_GlobalInvocationID.y) / screenHeight);
    // 直接光颜色
    vec4 color = texture(RTColor, texCoord);
    vec3 normal = texture(RTNormal, texCoord).xyz;
    vec3 worldPos = texture(RTWorldPos, texCoord).xyz;
    // 重建远平面点在世界空间的位置
    vec4 farPlaneNDCPos = vec4(texCoord.x * 2.0 - 1.0, texCoord.y * 2.0 - 1.0, 1.0, 1.0);
    vec4 farPlaneClipPos = farPlaneNDCPos * far;
    vec3 farPlaneWorldPos = (view_inverse * proj_inverse * farPlaneClipPos).xyz;
    // 根据重建的位置计算光线方向
    vec3 rayDir = normalize(farPlaneWorldPos - cameraPos);
    // ray tracing，启动！
    Ray3D myRay;
    myRay.point = cameraPos;
    myRay.direction = rayDir;

    // 测试：aabb相交函数
    float unit = TerrainSize / TerrainGrid;
    float len = TerrainSize;// + 2 * unit;
    // 初始化地形aabb
    terrainAABB.pointMin = (model * vec4(-len / 2.0, 0, -len / 2.0, 1.0)).xyz;
    terrainAABB.pointMax = (model * vec4(len / 2.0, TerrainHeight, len / 2.0, 1.0)).xyz;

    vec4 ans = worldPos.xyzz;

    float t_0 = 0; 
    vec3 inter_point_0 = vec3(0, 0, 0);
    vec3 normal_0 = vec3(0, 0, 0);
    int returnState_0 = 0;


    // 进行n次光线弹射
    // 实验代码
    
    vec3 lastCol = imageLoad(RTTarget, ivec2(gl_GlobalInvocationID.xy)).xyz;

    /** 默认材质：
    颜色：深绿
    粗糙度：rough
    金属度：0
    */
    vec3 green = vec3(45, 153, 83) / 255.0;
    vec3 red = vec3(216, 59, 31) / 255.0;
    vec3 sky = vec3(158, 231, 255) / 255.0;

    vec3 ansCol_0 = vec3(0);
    vec3 ansCol_1 = vec3(0);

    bool flag = false;
    float strength = 1.0;
    float atten = 0.99;
    int ej = 0;
    float dist = 0;
    // 光线击中地形
    flag = ray_intersection_scene(myRay, t_0, inter_point_0, normal_0, returnState_0);
    // 没击中直接退出
    if (!flag){
        imageStore(RTTarget, ivec2(gl_GlobalInvocationID.xy), vec4(sky, 1));
        return;
    }

    // 首先根据击中的信息，将射线结果叠加到该像素上
    // 先确定击中位置的颜色
    // 再次求交，计算直射光颜色
    // 进行阴影测试
    vec3 light;

    float t_1 = 0; 
    vec3 inter_point_1 = vec3(0, 0, 0);
    vec3 normal_1 = vec3(0, 0, 0);
    int returnState_1 = 0;

    Ray3D newRay;
    newRay.point = inter_point_0 + normal_0 * 0.01 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) / TerrainSize;
    newRay.direction = normalize(mainLightDir);
    if (!ray_intersection_scene(newRay, t_1, inter_point_1, normal_1, returnState_1)){
        light = mainLightStrength * mainLightColor * max(dot(normal_0, mainLightDir), 0);
    } else {
        light = vec3(0.1);
    }
    // 计算该点颜色
    vec3 thisCol;
    if (inter_point_0.x <= 0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) && inter_point_0.x >= -0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) && inter_point_0.z <= 0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) && inter_point_0.z >= -0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x)){
        thisCol = light * green;
    }else {
        thisCol = light * red;
    }
    ansCol_0 = thisCol * strength;

    // 那么需要更新光线信息
    myRay.point = inter_point_0 + normal_0 * 0.01 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) / TerrainSize;

    // 方向为Normal球上随机
    // while(true){
        // 先生成种子和u、v、r2
        uint seed_0 = 0, seed_1 = 0; 
        float u = 2, v = 2, r2 = 2;
        while(r2 > 1){
            seed_0 = uint((abs(inter_point_0.x) * (ej + 2) + abs(inter_point_0.y) * (ej + 1) + abs(inter_point_0.z) * (ej + 0)) * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) * 125685 * (ej + 3) * (time.msec / 4.0 + time.second + 3));
            seed_1 = uint((abs(inter_point_0.x) * (ej + 0) + abs(inter_point_0.y) * (ej + 2) + abs(inter_point_0.z) * (ej + 1)) * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) * 568512 * (ej + 3) * (time.msec / 4.0 + time.second + 3));

            u = XorShiftRand(seed_0);
            v = XorShiftRand(seed_1);
            r2 = u * u + v * v;
        }
        // 根据R2计算半球上的方向
        myRay.direction.x = 2 * u * sqrt(1 - r2);
        myRay.direction.y = 2 * v * sqrt(1 - r2);
        myRay.direction.z = 1 - 2 * r2;
        vec3 refDir = reflect(rayDir, normal_0);
        myRay.direction = normalize(refDir * 0.75 + myRay.direction);
        // 考察其是否可用
        // if (dot(normalize(myRay.direction), normalize(normal_0)) > 0.9){
        //     myRay.direction = normalize(myRay.direction);
        //     break;
        // }
    // }

    // 第二次
    ej ++;
    // 光线击中地形
    vec3 last_point = inter_point_0;
    flag = ray_intersection_scene(myRay, t_0, inter_point_0, normal_0, returnState_0);
    // 没击中直接退出
    if (flag){
        light = vec3(0);

        t_1 = 0; 
        inter_point_1 = vec3(0, 0, 0);
        normal_1 = vec3(0, 0, 0);
        returnState_1 = 0;

        newRay.point = inter_point_0 + normal_0 * 0.01 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) / TerrainSize;
        newRay.direction = normalize(mainLightDir);
        if (!ray_intersection_scene(newRay, t_1, inter_point_1, normal_1, returnState_1)){
            light = mainLightStrength * mainLightColor * max(dot(normal_0, mainLightDir), 0);
        } else {
            light = vec3(0.1);
        }
        // 计算该点颜色
        if (inter_point_0.x <= 0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) && inter_point_0.x >= -0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) && inter_point_0.z <= 0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x) && inter_point_0.z >= -0.5001 * abs(terrainAABB.pointMax.x - terrainAABB.pointMin.x)){
            thisCol = light * green;
        }else {
            thisCol = light * red;
        }
        dist += length(last_point - inter_point_0);
        strength = strength / ((dist + 1) * (dist + 1));
        ansCol_1 = thisCol * strength;
    } else {
        ansCol_1 = sky * 0.3;
    }

    vec3 ansCol = ansCol_0 + ansCol_1;
    ans = vec4(ansCol * 0.1 + lastCol * 0.9, 1);

    // Ray3D testRay;
    // testRay.point = cameraPos;
    // testRay.direction = rayDir;
    // float test_t;
    // vec3 test_p;
    // if (ray_intersection_xz_rect(testRay, 0, vec2(-5, 5), vec2(-5, 5), test_t, test_p)){
    //     vec2 col = test_p.xz * 0.2 + 0.5;
    //     vec3 reflected = reflect(testRay.direction, vec3(0, 1, 0));
    //     ans = vec4(reflected, 1);
    // } else ans = vec4(0, 0, 0, 1);

    // 进行一次直接光照+阴影
    // normal_0 = vec3(0);
    // if (ray_intersection_scene(myRay, t_0, inter_point_0, normal_0, returnState_0)){
    //     ans = vec4(normal_0, 1);
    // }else {
    //     ans = vec4(89.0 / 255.0, 177.0 / 255.0, 215.0 / 255.0, 1);
    // }



    // ans = vec4(newDir * 0.5 + 0.5,1);

    // TODO 将ans值框定到[0,+∞)

    imageStore(RTTarget, ivec2(gl_GlobalInvocationID.xy), ans);
}